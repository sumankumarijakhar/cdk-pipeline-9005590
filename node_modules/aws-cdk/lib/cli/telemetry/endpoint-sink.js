"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EndpointTelemetrySink = void 0;
const https_1 = require("https");
const toolkit_lib_1 = require("@aws-cdk/toolkit-lib");
const api_private_1 = require("../../api-private");
const REQUEST_ATTEMPT_TIMEOUT_MS = 500;
/**
 * The telemetry client that hits an external endpoint.
 */
class EndpointTelemetrySink {
    constructor(props) {
        this.events = [];
        this.endpoint = props.endpoint;
        this.ioHelper = api_private_1.IoHelper.fromActionAwareIoHost(props.ioHost);
        this.agent = props.agent;
        // Batch events every 30 seconds
        setInterval(() => this.flush(), 30000).unref();
    }
    /**
     * Add an event to the collection.
     */
    async emit(event) {
        try {
            this.events.push(event);
        }
        catch (e) {
            // Never throw errors, just log them via ioHost
            await this.ioHelper.defaults.trace(`Failed to add telemetry event: ${e.message}`);
        }
    }
    async flush() {
        try {
            if (this.events.length === 0) {
                return;
            }
            const res = await this.https(this.endpoint, this.events);
            // Clear the events array after successful output
            if (res) {
                this.events = [];
            }
        }
        catch (e) {
            // Never throw errors, just log them via ioHost
            await this.ioHelper.defaults.trace(`Failed to add telemetry event: ${e.message}`);
        }
    }
    /**
     * Returns true if telemetry successfully posted, false otherwise.
     */
    async https(url, body) {
        try {
            const res = await doRequest(url, body, this.agent);
            // Successfully posted
            if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {
                return true;
            }
            await this.ioHelper.defaults.trace(`Telemetry Unsuccessful: POST ${url.hostname}${url.pathname}: ${res.statusCode}:${res.statusMessage}`);
            return false;
        }
        catch (e) {
            await this.ioHelper.defaults.trace(`Telemetry Error: POST ${url.hostname}${url.pathname}: ${JSON.stringify(e)}`);
            return false;
        }
    }
}
exports.EndpointTelemetrySink = EndpointTelemetrySink;
/**
 * A Promisified version of `https.request()`
 */
function doRequest(url, data, agent) {
    return new Promise((ok, ko) => {
        const payload = JSON.stringify(data);
        const req = (0, https_1.request)({
            hostname: url.hostname,
            port: url.port,
            path: url.pathname,
            method: 'POST',
            headers: {
                'content-type': 'application/json',
                'content-length': payload.length,
            },
            agent,
            timeout: REQUEST_ATTEMPT_TIMEOUT_MS,
        }, ok);
        req.on('error', ko);
        req.on('timeout', () => {
            const error = new toolkit_lib_1.ToolkitError(`Timeout after ${REQUEST_ATTEMPT_TIMEOUT_MS}ms, aborting request`);
            req.destroy(error);
        });
        req.end(payload);
    });
}
//# sourceMappingURL=data:application/json;base64,